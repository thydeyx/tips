#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TipsStidInfo:
  """
  Attributes:
   - globalId
   - strategy
   - alg
   - server
   - kv
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'globalId', None, "", ), # 1
    (2, TType.STRING, 'strategy', None, "", ), # 2
    (3, TType.STRING, 'alg', None, None, ), # 3
    (4, TType.STRING, 'server', None, None, ), # 4
    (5, TType.MAP, 'kv', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'ext', (TType.STRING,None,TType.STRING,None), None, ), # 6
  )

  def __init__(self, globalId=thrift_spec[1][4], strategy=thrift_spec[2][4], alg=None, server=None, kv=None, ext=None,):
    self.globalId = globalId
    self.strategy = strategy
    self.alg = alg
    self.server = server
    self.kv = kv
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.globalId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.strategy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.alg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.server = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.kv = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.kv[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.ext = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin() 
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readString();
            self.ext[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TipsStidInfo')
    if self.globalId is not None:
      oprot.writeFieldBegin('globalId', TType.STRING, 1)
      oprot.writeString(self.globalId)
      oprot.writeFieldEnd()
    if self.strategy is not None:
      oprot.writeFieldBegin('strategy', TType.STRING, 2)
      oprot.writeString(self.strategy)
      oprot.writeFieldEnd()
    if self.alg is not None:
      oprot.writeFieldBegin('alg', TType.STRING, 3)
      oprot.writeString(self.alg)
      oprot.writeFieldEnd()
    if self.server is not None:
      oprot.writeFieldBegin('server', TType.STRING, 4)
      oprot.writeString(self.server)
      oprot.writeFieldEnd()
    if self.kv is not None:
      oprot.writeFieldBegin('kv', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.kv))
      for kiter14,viter15 in self.kv.items():
        oprot.writeString(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.ext))
      for kiter16,viter17 in self.ext.items():
        oprot.writeString(kiter16)
        oprot.writeString(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.globalId is None:
      raise TProtocol.TProtocolException(message='Required field globalId is unset!')
    if self.strategy is None:
      raise TProtocol.TProtocolException(message='Required field strategy is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TWifi:
  """
  Attributes:
   - MACaddress
   - strength
   - name
   - isConnected
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'MACaddress', None, None, ), # 1
    (2, TType.I32, 'strength', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.BOOL, 'isConnected', None, False, ), # 4
  )

  def __init__(self, MACaddress=None, strength=None, name=None, isConnected=thrift_spec[4][4],):
    self.MACaddress = MACaddress
    self.strength = strength
    self.name = name
    self.isConnected = isConnected

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.MACaddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.strength = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.isConnected = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TWifi')
    if self.MACaddress is not None:
      oprot.writeFieldBegin('MACaddress', TType.STRING, 1)
      oprot.writeString(self.MACaddress)
      oprot.writeFieldEnd()
    if self.strength is not None:
      oprot.writeFieldBegin('strength', TType.I32, 2)
      oprot.writeI32(self.strength)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.isConnected is not None:
      oprot.writeFieldBegin('isConnected', TType.BOOL, 4)
      oprot.writeBool(self.isConnected)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Location:
  """
  Attributes:
   - latitude
   - longitude
   - wifis
   - exdata
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'latitude', None, -200, ), # 1
    (2, TType.DOUBLE, 'longitude', None, -200, ), # 2
    (3, TType.LIST, 'wifis', (TType.STRUCT,(TWifi, TWifi.thrift_spec)), None, ), # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.MAP, 'exdata', (TType.STRING,None,TType.STRING,None), None, ), # 40
  )

  def __init__(self, latitude=thrift_spec[1][4], longitude=thrift_spec[2][4], wifis=None, exdata=None,):
    self.latitude = latitude
    self.longitude = longitude
    self.wifis = wifis
    self.exdata = exdata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.wifis = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = TWifi()
            _elem23.read(iprot)
            self.wifis.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.MAP:
          self.exdata = {}
          (_ktype25, _vtype26, _size24 ) = iprot.readMapBegin() 
          for _i28 in xrange(_size24):
            _key29 = iprot.readString();
            _val30 = iprot.readString();
            self.exdata[_key29] = _val30
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Location')
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.wifis is not None:
      oprot.writeFieldBegin('wifis', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.wifis))
      for iter31 in self.wifis:
        iter31.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exdata is not None:
      oprot.writeFieldBegin('exdata', TType.MAP, 40)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.exdata))
      for kiter32,viter33 in self.exdata.items():
        oprot.writeString(kiter32)
        oprot.writeString(viter33)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.latitude is None:
      raise TProtocol.TProtocolException(message='Required field latitude is unset!')
    if self.longitude is None:
      raise TProtocol.TProtocolException(message='Required field longitude is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SelectMsg:
  """
  Attributes:
   - areaid
   - cateid
   - sort
   - exdata
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'areaid', None, "", ), # 1
    (2, TType.STRING, 'cateid', None, "", ), # 2
    (3, TType.STRING, 'sort', None, "", ), # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.MAP, 'exdata', (TType.STRING,None,TType.STRING,None), None, ), # 40
  )

  def __init__(self, areaid=thrift_spec[1][4], cateid=thrift_spec[2][4], sort=thrift_spec[3][4], exdata=None,):
    self.areaid = areaid
    self.cateid = cateid
    self.sort = sort
    self.exdata = exdata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.areaid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cateid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sort = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.MAP:
          self.exdata = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin() 
          for _i38 in xrange(_size34):
            _key39 = iprot.readString();
            _val40 = iprot.readString();
            self.exdata[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SelectMsg')
    if self.areaid is not None:
      oprot.writeFieldBegin('areaid', TType.STRING, 1)
      oprot.writeString(self.areaid)
      oprot.writeFieldEnd()
    if self.cateid is not None:
      oprot.writeFieldBegin('cateid', TType.STRING, 2)
      oprot.writeString(self.cateid)
      oprot.writeFieldEnd()
    if self.sort is not None:
      oprot.writeFieldBegin('sort', TType.STRING, 3)
      oprot.writeString(self.sort)
      oprot.writeFieldEnd()
    if self.exdata is not None:
      oprot.writeFieldBegin('exdata', TType.MAP, 40)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.exdata))
      for kiter41,viter42 in self.exdata.items():
        oprot.writeString(kiter41)
        oprot.writeString(viter42)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TipsItem:
  """
  Attributes:
   - word
   - count
   - stg
   - score
   - type
   - exdata
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'word', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
    (3, TType.STRING, 'stg', None, None, ), # 3
    (4, TType.DOUBLE, 'score', None, None, ), # 4
    (5, TType.STRING, 'type', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.MAP, 'exdata', (TType.STRING,None,TType.STRING,None), None, ), # 40
  )

  def __init__(self, word=None, count=None, stg=None, score=None, type=None, exdata=None,):
    self.word = word
    self.count = count
    self.stg = stg
    self.score = score
    self.type = type
    self.exdata = exdata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.word = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.stg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.MAP:
          self.exdata = {}
          (_ktype44, _vtype45, _size43 ) = iprot.readMapBegin() 
          for _i47 in xrange(_size43):
            _key48 = iprot.readString();
            _val49 = iprot.readString();
            self.exdata[_key48] = _val49
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TipsItem')
    if self.word is not None:
      oprot.writeFieldBegin('word', TType.STRING, 1)
      oprot.writeString(self.word)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.stg is not None:
      oprot.writeFieldBegin('stg', TType.STRING, 3)
      oprot.writeString(self.stg)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 4)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 5)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.exdata is not None:
      oprot.writeFieldBegin('exdata', TType.MAP, 40)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.exdata))
      for kiter50,viter51 in self.exdata.items():
        oprot.writeString(kiter50)
        oprot.writeString(viter51)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.word is None:
      raise TProtocol.TProtocolException(message='Required field word is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TipsReq:
  """
  Attributes:
   - reqid
   - cityid
   - query
   - userid
   - uuid
   - device
   - limit
   - length
   - strategy
   - traceId
   - location
   - selectMsg
   - exdata
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'reqid', None, 1, ), # 1
    (2, TType.I32, 'cityid', None, None, ), # 2
    (3, TType.STRING, 'query', None, None, ), # 3
    (4, TType.I32, 'userid', None, -1, ), # 4
    (5, TType.STRING, 'uuid', None, "", ), # 5
    (6, TType.STRING, 'device', None, "", ), # 6
    (7, TType.I32, 'limit', None, 15, ), # 7
    (8, TType.I32, 'length', None, -1, ), # 8
    (9, TType.STRING, 'strategy', None, "", ), # 9
    (10, TType.STRING, 'traceId', None, "", ), # 10
    (11, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'selectMsg', (SelectMsg, SelectMsg.thrift_spec), None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.MAP, 'exdata', (TType.STRING,None,TType.STRING,None), None, ), # 40
  )

  def __init__(self, reqid=thrift_spec[1][4], cityid=None, query=None, userid=thrift_spec[4][4], uuid=thrift_spec[5][4], device=thrift_spec[6][4], limit=thrift_spec[7][4], length=thrift_spec[8][4], strategy=thrift_spec[9][4], traceId=thrift_spec[10][4], location=None, selectMsg=None, exdata=None,):
    self.reqid = reqid
    self.cityid = cityid
    self.query = query
    self.userid = userid
    self.uuid = uuid
    self.device = device
    self.limit = limit
    self.length = length
    self.strategy = strategy
    self.traceId = traceId
    self.location = location
    self.selectMsg = selectMsg
    self.exdata = exdata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.reqid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cityid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.query = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.device = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.length = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.strategy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.traceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.location = Location()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.selectMsg = SelectMsg()
          self.selectMsg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.MAP:
          self.exdata = {}
          (_ktype53, _vtype54, _size52 ) = iprot.readMapBegin() 
          for _i56 in xrange(_size52):
            _key57 = iprot.readString();
            _val58 = iprot.readString();
            self.exdata[_key57] = _val58
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TipsReq')
    if self.reqid is not None:
      oprot.writeFieldBegin('reqid', TType.I32, 1)
      oprot.writeI32(self.reqid)
      oprot.writeFieldEnd()
    if self.cityid is not None:
      oprot.writeFieldBegin('cityid', TType.I32, 2)
      oprot.writeI32(self.cityid)
      oprot.writeFieldEnd()
    if self.query is not None:
      oprot.writeFieldBegin('query', TType.STRING, 3)
      oprot.writeString(self.query)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 4)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 5)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRING, 6)
      oprot.writeString(self.device)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 7)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.I32, 8)
      oprot.writeI32(self.length)
      oprot.writeFieldEnd()
    if self.strategy is not None:
      oprot.writeFieldBegin('strategy', TType.STRING, 9)
      oprot.writeString(self.strategy)
      oprot.writeFieldEnd()
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 10)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 11)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.selectMsg is not None:
      oprot.writeFieldBegin('selectMsg', TType.STRUCT, 12)
      self.selectMsg.write(oprot)
      oprot.writeFieldEnd()
    if self.exdata is not None:
      oprot.writeFieldBegin('exdata', TType.MAP, 40)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.exdata))
      for kiter59,viter60 in self.exdata.items():
        oprot.writeString(kiter59)
        oprot.writeString(viter60)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.reqid is None:
      raise TProtocol.TProtocolException(message='Required field reqid is unset!')
    if self.cityid is None:
      raise TProtocol.TProtocolException(message='Required field cityid is unset!')
    if self.query is None:
      raise TProtocol.TProtocolException(message='Required field query is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.uuid is None:
      raise TProtocol.TProtocolException(message='Required field uuid is unset!')
    if self.device is None:
      raise TProtocol.TProtocolException(message='Required field device is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.length is None:
      raise TProtocol.TProtocolException(message='Required field length is unset!')
    if self.strategy is None:
      raise TProtocol.TProtocolException(message='Required field strategy is unset!')
    if self.traceId is None:
      raise TProtocol.TProtocolException(message='Required field traceId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TipsRes:
  """
  Attributes:
   - tipsList
   - stidInfo
   - exdata
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'tipsList', (TType.STRUCT,(TipsItem, TipsItem.thrift_spec)), None, ), # 1
    (2, TType.STRUCT, 'stidInfo', (TipsStidInfo, TipsStidInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.MAP, 'exdata', (TType.STRING,None,TType.STRING,None), None, ), # 40
  )

  def __init__(self, tipsList=None, stidInfo=None, exdata=None,):
    self.tipsList = tipsList
    self.stidInfo = stidInfo
    self.exdata = exdata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.tipsList = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = TipsItem()
            _elem66.read(iprot)
            self.tipsList.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.stidInfo = TipsStidInfo()
          self.stidInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.MAP:
          self.exdata = {}
          (_ktype68, _vtype69, _size67 ) = iprot.readMapBegin() 
          for _i71 in xrange(_size67):
            _key72 = iprot.readString();
            _val73 = iprot.readString();
            self.exdata[_key72] = _val73
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TipsRes')
    if self.tipsList is not None:
      oprot.writeFieldBegin('tipsList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.tipsList))
      for iter74 in self.tipsList:
        iter74.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.stidInfo is not None:
      oprot.writeFieldBegin('stidInfo', TType.STRUCT, 2)
      self.stidInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.exdata is not None:
      oprot.writeFieldBegin('exdata', TType.MAP, 40)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.exdata))
      for kiter75,viter76 in self.exdata.items():
        oprot.writeString(kiter75)
        oprot.writeString(viter76)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tipsList is None:
      raise TProtocol.TProtocolException(message='Required field tipsList is unset!')
    if self.stidInfo is None:
      raise TProtocol.TProtocolException(message='Required field stidInfo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
